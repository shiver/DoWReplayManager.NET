//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DowReplayManager.NET.Types {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class ReplayStore : DataSet {
        
        private ReplayDataTable tableReplay;
        
        private PlayerDataTable tablePlayer;
        
        private MapDataTable tableMap;
        
        public ReplayStore() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected ReplayStore(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Replay"] != null)) {
                    this.Tables.Add(new ReplayDataTable(ds.Tables["Replay"]));
                }
                if ((ds.Tables["Player"] != null)) {
                    this.Tables.Add(new PlayerDataTable(ds.Tables["Player"]));
                }
                if ((ds.Tables["Map"] != null)) {
                    this.Tables.Add(new MapDataTable(ds.Tables["Map"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReplayDataTable Replay {
            get {
                return this.tableReplay;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PlayerDataTable Player {
            get {
                return this.tablePlayer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MapDataTable Map {
            get {
                return this.tableMap;
            }
        }
        
        public override DataSet Clone() {
            ReplayStore cln = ((ReplayStore)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Replay"] != null)) {
                this.Tables.Add(new ReplayDataTable(ds.Tables["Replay"]));
            }
            if ((ds.Tables["Player"] != null)) {
                this.Tables.Add(new PlayerDataTable(ds.Tables["Player"]));
            }
            if ((ds.Tables["Map"] != null)) {
                this.Tables.Add(new MapDataTable(ds.Tables["Map"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableReplay = ((ReplayDataTable)(this.Tables["Replay"]));
            if ((this.tableReplay != null)) {
                this.tableReplay.InitVars();
            }
            this.tablePlayer = ((PlayerDataTable)(this.Tables["Player"]));
            if ((this.tablePlayer != null)) {
                this.tablePlayer.InitVars();
            }
            this.tableMap = ((MapDataTable)(this.Tables["Map"]));
            if ((this.tableMap != null)) {
                this.tableMap.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "ReplayStore";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ReplayStore.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-ZA");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableReplay = new ReplayDataTable();
            this.Tables.Add(this.tableReplay);
            this.tablePlayer = new PlayerDataTable();
            this.Tables.Add(this.tablePlayer);
            this.tableMap = new MapDataTable();
            this.Tables.Add(this.tableMap);
        }
        
        private bool ShouldSerializeReplay() {
            return false;
        }
        
        private bool ShouldSerializePlayer() {
            return false;
        }
        
        private bool ShouldSerializeMap() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ReplayRowChangeEventHandler(object sender, ReplayRowChangeEvent e);
        
        public delegate void PlayerRowChangeEventHandler(object sender, PlayerRowChangeEvent e);
        
        public delegate void MapRowChangeEventHandler(object sender, MapRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReplayDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnCategoryID;
            
            private DataColumn columnName;
            
            private DataColumn columnHashCode;
            
            private DataColumn columnFilename;
            
            private DataColumn columnDateAdded;
            
            private DataColumn columnDateModified;
            
            internal ReplayDataTable() : 
                    base("Replay") {
                this.InitClass();
            }
            
            internal ReplayDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn HashCodeColumn {
                get {
                    return this.columnHashCode;
                }
            }
            
            internal DataColumn FilenameColumn {
                get {
                    return this.columnFilename;
                }
            }
            
            internal DataColumn DateAddedColumn {
                get {
                    return this.columnDateAdded;
                }
            }
            
            internal DataColumn DateModifiedColumn {
                get {
                    return this.columnDateModified;
                }
            }
            
            public ReplayRow this[int index] {
                get {
                    return ((ReplayRow)(this.Rows[index]));
                }
            }
            
            public event ReplayRowChangeEventHandler ReplayRowChanged;
            
            public event ReplayRowChangeEventHandler ReplayRowChanging;
            
            public event ReplayRowChangeEventHandler ReplayRowDeleted;
            
            public event ReplayRowChangeEventHandler ReplayRowDeleting;
            
            public void AddReplayRow(ReplayRow row) {
                this.Rows.Add(row);
            }
            
            public ReplayRow AddReplayRow(int CategoryID, string Name, System.Byte[] HashCode, string Filename, System.DateTime DateAdded, System.DateTime DateModified) {
                ReplayRow rowReplayRow = ((ReplayRow)(this.NewRow()));
                rowReplayRow.ItemArray = new object[] {
                        null,
                        CategoryID,
                        Name,
                        HashCode,
                        Filename,
                        DateAdded,
                        DateModified};
                this.Rows.Add(rowReplayRow);
                return rowReplayRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ReplayDataTable cln = ((ReplayDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ReplayDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnCategoryID = this.Columns["CategoryID"];
                this.columnName = this.Columns["Name"];
                this.columnHashCode = this.Columns["HashCode"];
                this.columnFilename = this.Columns["Filename"];
                this.columnDateAdded = this.Columns["DateAdded"];
                this.columnDateModified = this.Columns["DateModified"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnCategoryID = new DataColumn("CategoryID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCategoryID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnHashCode = new DataColumn("HashCode", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHashCode);
                this.columnFilename = new DataColumn("Filename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFilename);
                this.columnDateAdded = new DataColumn("DateAdded", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateAdded);
                this.columnDateModified = new DataColumn("DateModified", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDateModified);
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = 1;
                this.columnID.AllowDBNull = false;
                this.columnCategoryID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnHashCode.AllowDBNull = false;
                this.columnFilename.AllowDBNull = false;
                this.columnDateAdded.AllowDBNull = false;
                this.columnDateModified.AllowDBNull = false;
            }
            
            public ReplayRow NewReplayRow() {
                return ((ReplayRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ReplayRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ReplayRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReplayRowChanged != null)) {
                    this.ReplayRowChanged(this, new ReplayRowChangeEvent(((ReplayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReplayRowChanging != null)) {
                    this.ReplayRowChanging(this, new ReplayRowChangeEvent(((ReplayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReplayRowDeleted != null)) {
                    this.ReplayRowDeleted(this, new ReplayRowChangeEvent(((ReplayRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReplayRowDeleting != null)) {
                    this.ReplayRowDeleting(this, new ReplayRowChangeEvent(((ReplayRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveReplayRow(ReplayRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReplayRow : DataRow {
            
            private ReplayDataTable tableReplay;
            
            internal ReplayRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableReplay = ((ReplayDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableReplay.IDColumn]));
                }
                set {
                    this[this.tableReplay.IDColumn] = value;
                }
            }
            
            public int CategoryID {
                get {
                    return ((int)(this[this.tableReplay.CategoryIDColumn]));
                }
                set {
                    this[this.tableReplay.CategoryIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableReplay.NameColumn]));
                }
                set {
                    this[this.tableReplay.NameColumn] = value;
                }
            }
            
            public System.Byte[] HashCode {
                get {
                    return ((System.Byte[])(this[this.tableReplay.HashCodeColumn]));
                }
                set {
                    this[this.tableReplay.HashCodeColumn] = value;
                }
            }
            
            public string Filename {
                get {
                    return ((string)(this[this.tableReplay.FilenameColumn]));
                }
                set {
                    this[this.tableReplay.FilenameColumn] = value;
                }
            }
            
            public System.DateTime DateAdded {
                get {
                    return ((System.DateTime)(this[this.tableReplay.DateAddedColumn]));
                }
                set {
                    this[this.tableReplay.DateAddedColumn] = value;
                }
            }
            
            public System.DateTime DateModified {
                get {
                    return ((System.DateTime)(this[this.tableReplay.DateModifiedColumn]));
                }
                set {
                    this[this.tableReplay.DateModifiedColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ReplayRowChangeEvent : EventArgs {
            
            private ReplayRow eventRow;
            
            private DataRowAction eventAction;
            
            public ReplayRowChangeEvent(ReplayRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ReplayRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlayerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnName;
            
            private DataColumn columnReplayID;
            
            internal PlayerDataTable() : 
                    base("Player") {
                this.InitClass();
            }
            
            internal PlayerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ReplayIDColumn {
                get {
                    return this.columnReplayID;
                }
            }
            
            public PlayerRow this[int index] {
                get {
                    return ((PlayerRow)(this.Rows[index]));
                }
            }
            
            public event PlayerRowChangeEventHandler PlayerRowChanged;
            
            public event PlayerRowChangeEventHandler PlayerRowChanging;
            
            public event PlayerRowChangeEventHandler PlayerRowDeleted;
            
            public event PlayerRowChangeEventHandler PlayerRowDeleting;
            
            public void AddPlayerRow(PlayerRow row) {
                this.Rows.Add(row);
            }
            
            public PlayerRow AddPlayerRow(string Name, int ReplayID) {
                PlayerRow rowPlayerRow = ((PlayerRow)(this.NewRow()));
                rowPlayerRow.ItemArray = new object[] {
                        null,
                        Name,
                        ReplayID};
                this.Rows.Add(rowPlayerRow);
                return rowPlayerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PlayerDataTable cln = ((PlayerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PlayerDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnName = this.Columns["Name"];
                this.columnReplayID = this.Columns["ReplayID"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnReplayID = new DataColumn("ReplayID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReplayID);
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = 1;
                this.columnID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnReplayID.AllowDBNull = false;
            }
            
            public PlayerRow NewPlayerRow() {
                return ((PlayerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PlayerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PlayerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PlayerRowChanged != null)) {
                    this.PlayerRowChanged(this, new PlayerRowChangeEvent(((PlayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PlayerRowChanging != null)) {
                    this.PlayerRowChanging(this, new PlayerRowChangeEvent(((PlayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PlayerRowDeleted != null)) {
                    this.PlayerRowDeleted(this, new PlayerRowChangeEvent(((PlayerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PlayerRowDeleting != null)) {
                    this.PlayerRowDeleting(this, new PlayerRowChangeEvent(((PlayerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePlayerRow(PlayerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlayerRow : DataRow {
            
            private PlayerDataTable tablePlayer;
            
            internal PlayerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePlayer = ((PlayerDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tablePlayer.IDColumn]));
                }
                set {
                    this[this.tablePlayer.IDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tablePlayer.NameColumn]));
                }
                set {
                    this[this.tablePlayer.NameColumn] = value;
                }
            }
            
            public int ReplayID {
                get {
                    return ((int)(this[this.tablePlayer.ReplayIDColumn]));
                }
                set {
                    this[this.tablePlayer.ReplayIDColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PlayerRowChangeEvent : EventArgs {
            
            private PlayerRow eventRow;
            
            private DataRowAction eventAction;
            
            public PlayerRowChangeEvent(PlayerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PlayerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MapDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnName;
            
            private DataColumn columnReplayID;
            
            internal MapDataTable() : 
                    base("Map") {
                this.InitClass();
            }
            
            internal MapDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn ReplayIDColumn {
                get {
                    return this.columnReplayID;
                }
            }
            
            public MapRow this[int index] {
                get {
                    return ((MapRow)(this.Rows[index]));
                }
            }
            
            public event MapRowChangeEventHandler MapRowChanged;
            
            public event MapRowChangeEventHandler MapRowChanging;
            
            public event MapRowChangeEventHandler MapRowDeleted;
            
            public event MapRowChangeEventHandler MapRowDeleting;
            
            public void AddMapRow(MapRow row) {
                this.Rows.Add(row);
            }
            
            public MapRow AddMapRow(string Name, int ReplayID) {
                MapRow rowMapRow = ((MapRow)(this.NewRow()));
                rowMapRow.ItemArray = new object[] {
                        null,
                        Name,
                        ReplayID};
                this.Rows.Add(rowMapRow);
                return rowMapRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MapDataTable cln = ((MapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MapDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnName = this.Columns["Name"];
                this.columnReplayID = this.Columns["ReplayID"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnReplayID = new DataColumn("ReplayID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReplayID);
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = 1;
                this.columnID.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnReplayID.AllowDBNull = false;
            }
            
            public MapRow NewMapRow() {
                return ((MapRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MapRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MapRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MapRowChanged != null)) {
                    this.MapRowChanged(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MapRowChanging != null)) {
                    this.MapRowChanging(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MapRowDeleted != null)) {
                    this.MapRowDeleted(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MapRowDeleting != null)) {
                    this.MapRowDeleting(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMapRow(MapRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MapRow : DataRow {
            
            private MapDataTable tableMap;
            
            internal MapRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMap = ((MapDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tableMap.IDColumn]));
                }
                set {
                    this[this.tableMap.IDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    return ((string)(this[this.tableMap.NameColumn]));
                }
                set {
                    this[this.tableMap.NameColumn] = value;
                }
            }
            
            public int ReplayID {
                get {
                    return ((int)(this[this.tableMap.ReplayIDColumn]));
                }
                set {
                    this[this.tableMap.ReplayIDColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MapRowChangeEvent : EventArgs {
            
            private MapRow eventRow;
            
            private DataRowAction eventAction;
            
            public MapRowChangeEvent(MapRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
